name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python 
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Set up environment variables (Africa's Talking API credentials)
      - name: Set up environment variables
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "AFRICASTALKING_USERNAME=${{ secrets.AFRICASTALKING_USERNAME }}" >> $GITHUB_ENV
          echo "AFRICASTALKING_API_KEY=${{ secrets.AFRICASTALKING_API_KEY }}" >> $GITHUB_ENV
          echo "FLASK_SECRET_KEY=${{ secrets.FLASK_SECRET_KEY }}" >> $GITHUB_ENV

      # Set up database and run migrations
      - name: Set up database
        run: |
          if [ ! -d "migrations" ]; then
            echo "Initializing migrations folder..."
            python -m flask db init
          else
            echo "Migrations folder already exists. Skipping 'flask db init'."
          fi
          python -m flask db migrate
          python -m flask db upgrade
          
      # Debug: Check the current migration history
      - name: Check migration history
        run: |
          flask db history   

       # Debug: List tables in the database using Python script
      - name: List tables in database
        run: |
          python3 -c "
          from app import create_app
          from app.extensions import db
          app = create_app()
          with app.app_context():
              print(db.metadata.tables.keys())
          "

      # Seed data for tests (inventory, customers, etc.)
      - name: Seed data for tests
        run: |
          python3 -c "
          from app import create_app
          from app.extensions import db
          from app.models import Inventory, Customer, Order
          app = create_app()
          with app.app_context():
              # Seed necessary data for the tests
              inventory = Inventory(name='Item 1', on_hand=10, warn_limit=5)
              db.session.add(inventory)
              customer = Customer(name='Jane Doe', code='C002', phone_number='+254758793098')
              db.session.add(customer)
              # Creating an order for the customer
              order = Order(customer_id=customer.id)
              db.session.add(order)
              db.session.commit()
          "
      # Run tests with pytest and coverage
      - name: Run tests
        run: |
          pytest --cov=app --cov-report=term-missing -v

      # Upload coverage reports (for GitHub Actions only)
      - name: Upload coverage report
        if: success()
        uses: codecov/codecov-action@v2
        with:
          files: "coverage.xml"
